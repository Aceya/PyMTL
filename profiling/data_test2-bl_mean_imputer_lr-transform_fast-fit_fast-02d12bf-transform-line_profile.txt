[tadej@tlinux64 ERMRec]$ kernprof.py -l -v src/ERMRec/test.py
[2013-03-18 17:11:44] ERMRec          INFO   : Scoring measure AUC could not be computed for 2 out of 27 users (7.4%)
[2013-03-18 17:11:44] ERMRec          DEBUG  : Finished fold: 0, base learner: log_reg, learner: NoMerging in 0.11s
[2013-03-18 17:11:44] ERMRec.learning.learning DEBUG  : Merged data has 154 attributes and 5291 examples.
[2013-03-18 17:11:44] ERMRec          INFO   : Scoring measure AUC could not be computed for 2 out of 27 users (7.4%)
[2013-03-18 17:11:44] ERMRec          DEBUG  : Finished fold: 0, base learner: log_reg, learner: MergeAll in 0.11s
[2013-03-18 17:12:44] ERMRec          INFO   : Scoring measure AUC could not be computed for 2 out of 27 users (7.4%)
[2013-03-18 17:12:44] ERMRec          DEBUG  : Finished fold: 0, base learner: log_reg, learner: ERM in 59.92s
[2013-03-18 17:12:44] ERMRec          INFO   : Scoring measure AUC could not be computed for 4 out of 27 users (14.8%)
[2013-03-18 17:12:44] ERMRec          DEBUG  : Finished fold: 1, base learner: log_reg, learner: NoMerging in 0.10s
[2013-03-18 17:12:44] ERMRec.learning.learning DEBUG  : Merged data has 154 attributes and 5294 examples.
[2013-03-18 17:12:44] ERMRec          INFO   : Scoring measure AUC could not be computed for 4 out of 27 users (14.8%)
[2013-03-18 17:12:44] ERMRec          DEBUG  : Finished fold: 1, base learner: log_reg, learner: MergeAll in 0.11s
[2013-03-18 17:13:34] ERMRec          INFO   : Scoring measure AUC could not be computed for 4 out of 27 users (14.8%)
[2013-03-18 17:13:34] ERMRec          DEBUG  : Finished fold: 1, base learner: log_reg, learner: ERM in 50.01s
[2013-03-18 17:13:35] ERMRec          DEBUG  : Finished fold: 2, base learner: log_reg, learner: NoMerging in 0.09s
[2013-03-18 17:13:35] ERMRec.learning.learning DEBUG  : Merged data has 154 attributes and 5298 examples.
[2013-03-18 17:13:35] ERMRec          DEBUG  : Finished fold: 2, base learner: log_reg, learner: MergeAll in 0.11s
[2013-03-18 17:14:21] ERMRec          DEBUG  : Finished fold: 2, base learner: log_reg, learner: ERM in 45.69s
[2013-03-18 17:14:21] ERMRec          INFO   : Scoring measure AUC could not be computed for 1 out of 27 users (3.7%)
[2013-03-18 17:14:21] ERMRec          DEBUG  : Finished fold: 3, base learner: log_reg, learner: NoMerging in 0.10s
[2013-03-18 17:14:21] ERMRec.learning.learning DEBUG  : Merged data has 154 attributes and 5308 examples.
[2013-03-18 17:14:21] ERMRec          INFO   : Scoring measure AUC could not be computed for 1 out of 27 users (3.7%)
[2013-03-18 17:14:21] ERMRec          DEBUG  : Finished fold: 3, base learner: log_reg, learner: MergeAll in 0.13s
[2013-03-18 17:14:59] ERMRec.learning.testing DEBUG  : Learning data for data1 has less than 2 class values. Using DummyClassifier.
[2013-03-18 17:15:14] ERMRec          INFO   : Scoring measure AUC could not be computed for 1 out of 27 users (3.7%)
[2013-03-18 17:15:14] ERMRec          DEBUG  : Finished fold: 3, base learner: log_reg, learner: ERM in 52.97s
[2013-03-18 17:15:14] ERMRec          INFO   : Scoring measure AUC could not be computed for 3 out of 27 users (11.1%)
[2013-03-18 17:15:14] ERMRec          DEBUG  : Finished fold: 4, base learner: log_reg, learner: NoMerging in 0.10s
[2013-03-18 17:15:14] ERMRec.learning.learning DEBUG  : Merged data has 154 attributes and 5313 examples.
[2013-03-18 17:15:14] ERMRec          INFO   : Scoring measure AUC could not be computed for 3 out of 27 users (11.1%)
[2013-03-18 17:15:14] ERMRec          DEBUG  : Finished fold: 4, base learner: log_reg, learner: MergeAll in 0.10s
[2013-03-18 17:16:15] ERMRec          INFO   : Scoring measure AUC could not be computed for 3 out of 27 users (11.1%)
[2013-03-18 17:16:15] ERMRec          DEBUG  : Finished fold: 4, base learner: log_reg, learner: ERM in 60.20s
Wrote profile results to test.py.lprof
Timer unit: 1e-06 s

File: /home/tadej/Workspace/ERMRec/src/ERMRec/sklearn_utils.py
Function: transform at line 189
Total time: 52.2887 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   189                                               @profile
   190                                               def transform(self, X):
   191                                                   """Impute the missing values of features with indices in feat_indices_
   192                                                   with the means in mean_
   193                                                   
   194                                                   Parameters
   195                                                   ----------
   196                                                   X : array-like with shape [n_samples, n_features]
   197                                                       Input data that will be transformed.
   198                                                   """
   199    130865       236252      1.8      0.5          X = check_arrays_without_finite_check(X, sparse_format="dense",
   200    130865      7850460     60.0     15.0                                                copy=self.copy)[0]
   201                                                   # convert the input array to 2D if it is 1D
   202    130865       243739      1.9      0.5          if len(X.shape) == 1:
   203                                                       X = np.array([X])
   204                                                   # convert the self.feat_indices_ list to a boolean array with the same
   205                                                   # shape as X
   206    130865       686114      5.2      1.3          feat_indices_mask = np.zeros(X.shape[1], dtype="bool")
   207    130865       827330      6.3      1.6          feat_indices_mask[self.feat_indices_] = True
   208    130865      3790967     29.0      7.3          feat_indices_mask = np.tile(feat_indices_mask, (len(X), 1))
   209                                                   # create the imputation mask (a value has to be NaN and it must be
   210                                                   # selected for imputation by the feat_indices_mask)
   211    130865     17305241    132.2     33.1          imputation_mask = np.isnan(X) & feat_indices_mask
   212                                                   # clone the self.mean_ vector as many times as there are rows in X
   213    130865      5530487     42.3     10.6          repeated_means = np.tile(self.mean_, (len(X), 1))
   214                                                   # perform the imputation
   215    130865     15662713    119.7     30.0          X[imputation_mask] = repeated_means[imputation_mask]
   216    130865       155436      1.2      0.3          return X

[tadej@tlinux64 ERMRec]$
